{
  /* 선택, 불린
   * debug가 참일 경우 cryptsetup 호출을 준비하지 않습니다.
   * 터미널 인터페이스가 실제로 어떻게 표시되는지 확인하는 것에 유용합니다.
   */
  "debug": false,
  /* 필수, 문자열(UUID)
   * LUKS 디바이스(파티션)의 UUID가 여기에 적힙니다.
   * encrypttui v0.1.0 이하는 커널 명령을 지원하지 않기 때문에 이 항목은 필수입니다.
   * encrypttui v1.0.0 부터 커널 명령을 도입하고 이 항목을 선택으로 변경할 것입니다.
   */
  "cryptdevice_uuid": "88524162-8076-49e4-9a0f-ad9520a0e970",
  /* 필수, 문자열
   * LUKS 디바이스가 열리고나서 /dev/mapper에서 갖게될 이름입니다.
   * encrypttui v0.1.0 이하는 커널 명령을 지원하지 않기 때문에 이 항목은 필수입니다.
   * encrypttui v1.0.0 부터 커널 명령을 도입하고 이 항목을 선택으로 변경할 것입니다.
   */
  "cryptname": "cryptroot",
  /* 선택, 0보다 큰 정수
   * 가끔씩, 저장 장치가 너무 느려서 커널이 디바이스를 인식하기도 전에 encrypttui가 실행될 수 있습니다.
   * 이것은 디바이스를 찾을 수 없다는 오류로 이어질 수 있기 떄문에 정해진 시간동안 디바이스가 인식되기를 기다려야 합니다.
   * 
   * 이 항목은 정해진 수만큼 디바이스 찾기를 시도합니다. 예를 들어서 30이면 30번 시도합니다.
   * 이 항목은 선택이고 기본값은 30입니다.
   */
  "try_times": 30,
  /* 선택, 0보다 크거나 같은 정수
   * try_times의 코멘트와 같은 이유로 존재합니다.
   * 이 항목은 디바이스 찾기를 시도하고 나서 몆 밀리초간 기다릴지 설정합니다.
   * 이 항목은 선택이고 기본값은 100입니다.
   */
  "try_interval": 100,
  /* 필수
   * encrypttui가 사용자 지정 요소를 어떻게 배치해야하는지 정의합니다.
   * 인덱스 0부터 시작하기 때문에 인덱스 0이 가장 아래 요소 입니다.
   * 예를 들어서 인덱스 1번이 인덱스 0번을 덮어쓸 수 있습니다.
   * 자세한 내용은 다른 문서 (기획중)에서 확인하세요.
   */
  "layers": [
    {
      /* 필수
       * 이 요소가 화면 어디에 위치할지 정합니다.
       */
      "position": {
        /* 필수, 좌표
         * 가로축입니다.
         *
         * 좌표 타입인 x는 다음과 같은 성질을 갖습니다.
         * 키 이름이 'x'라면 왼쪽이 0입니다.
         * 키 이름이 '-x'라면 오른쪽이 0입니다.
         * 쉽게 생각해서 키 앞에 -가 붙으면 뒤집습니다.
         *
         * 좌표는 숫자 뿐만아니라 비율로도 나타낼 수 있습니다.
         * 예를 들어서 "1/2"혹은 "1:2"는 스크린의 길이를 1/2로 나눈곳에 위치합니다.
         */
        "x": "1:2",
        /* 필수, 좌표
         * 세로축입니다.
         *
         *
         * 좌표 타입인 y는 다음과 같은이한 성질을 갖습니다.
         * 키 이름이 'y'라면 위가 0입니다.
         * 키 이름이 '-y'라면 아래가 0입니다.
         * 쉽게 생각해서 키 앞에 -가 붙으면 뒤집습니다.
         *
         * 좌표는 숫자 뿐만아니라 비율로도 나타낼 수 있습니다.
         * 예를 들어서 "1/2"혹은 "1:2"는 스크린의 길이를 1/2로 나눈곳에 위치합니다.
         */
        "y": 1
      },
      /* 필수
       * 이 요소의 오리진을 설정합니다.
       */
      "origin": {
        /* 필수, 좌표
         * 가로축입니다.
         *
         * 좌표 타입인 x는 다음과 같은 성질을 갖습니다.
         * 키 이름이 'x'라면 왼쪽이 0입니다.
         * 키 이름이 '-x'라면 오른쪽이 0입니다.
         * 쉽게 생각해서 키 앞에 -가 붙으면 뒤집습니다.
         *
         * 좌표는 숫자 뿐만아니라 비율로도 나타낼 수 있습니다.
         * 예를 들어서 "1/2"혹은 "1:2"는 ANSI 아트의 길이를 1/2로 나눈곳에 위치합니다.
         */
        "x": "1:2",
        /* 필수, 좌표
         * 세로축입니다.
         *
         *
         * 좌표 타입인 y는 다음과 같은이한 성질을 갖습니다.
         * 키 이름이 'y'라면 위가 0입니다.
         * 키 이름이 '-y'라면 아래가 0입니다.
         * 쉽게 생각해서 키 앞에 -가 붙으면 뒤집습니다.
         *
         * 좌표는 숫자 뿐만아니라 비율로도 나타낼 수 있습니다.
         * 예를 들어서 "1/2"혹은 "1:2"는 ANSI 아트의 길이를 1/2로 나눈곳에 위치합니다.
         */
        "y": 0
      },
      /* 선택, 문자열
       * ANSI 아트의 위치입니다.
       * 구성 파일이 위치한 디렉토리가 루트입니다. 예를 들어서 "/files/message"혹은 "files/message"는 구성 파일이 위치한 디렉토리의 files의 message파일을 의미합니다.
       *
       * 만약 raw를 정의한다면 file은 무시됩니다.
       */
      //"file": "files/message"
      /* 선택, 문자열
       * ANSI 아트입니다.
       *
       * file을 정의해도 raw의 우선순위가 높기 때문에 file은 무시됩니다.
       * raw를 정의하지 않는다면 file을 사용하게됩니다.
       */
      "raw": "This device is encrypted. Please enter the password."
    },
    {
      "position": {
        "x": "1:2",
        "y": "1:2"
      },
      "origin": {
        "x": "1:2",
        "y": "1:2"
      },
      "file": "files/logo"
    },
    {
      "position": {
        "x": 1,
        "-y": 4
      },
      "origin": {
        "x": 0,
        "y": "1:1"
      },
      "file": "files/lock"
    }
  ],
  /* 필수
   * 비밀번호 입력칸입니다.
   * 무조건 가로로 길고 길이는 패딩으로 결정합니다.
   * 
   */
  "input": {
    /* 필수, 좌표
     * 왼쪽 패딩입니다.
     *
     * 패딩은 좌표 타입이지만 뒤집기가 불가능합니다. 즉 키 앞에 '-'를 붙일 수 없습니다.
     */
    "left_padding": 12,
    /* 필수, 좌표
     * 오른쪽 패딩입니다.
     *
     * 패딩은 좌표 타입이지만 뒤집기가 불가능합니다. 즉 키 앞에 '-'를 붙일 수 없습니다.
     */
    "right_padding": 12,
    /* 필수, 좌표
     * 비밀번호 입력은 가로로 길기 때문에 세로축을 나타냅니다.
     *
     * 뒤집지 않으면 0이 맨 위 입니다.
     * 뒤집을 경우 0이 맨 아래입니다.
     */
    "-position": 8,
    /* 선택
     * 비밀번호 입력칸의 모양을 정의합니다.
     */
    "shape": {
      /* 필수
       * 비밀번호 입력칸 ANSI에서 어디서부터 입력이 시작하는지 정의합니다.
       */
      "start_position": {
        /* 필수, 숫자
         * 좌표가 아닙니다. 따라서 뒤집기와 비율을 사용할 수 없습니다.
         *
         * x는 y와 달리 특별한 역할을 갖습니다.
         * 예를 들어서 x가 1이면, x=1을 만족하는 문자들로 칸을 확장시킵니다.
         * 그러니깐 ASNI가 다음과 같으면
         * ```
         * ,-,
         * | |
         * '-'
         * ```
         * 대략 이렇게 확장됩니다.
         * ```
         * ,---------,
         * |         |
         * '---------'
         * ```
         */
        "x": 1,
        /* 필수, 숫자
         * 좌표가 아닙니다. 따라서 뒤집기와 비율을 사용할 수 없습니다.
         */
        "y": 1
      },
      /* 선택, 문자열
       * 입력칸에 입력을 시작하기 전에 출력할 추가 문자열입니다.
       * ANSI 이스케이프를 사용해 비밀번호에 색상을 입힐 수 있습니다.
       * ANSI 이스케이프를 색상을 입히는 용도 외에 사용하지 않도록 합니다.
       * 기본 값은 ""입니다.
       */
      "before_start": "",
      /*선택, 문자
       * 비밀번호가 입력될때마다 표시될 문자입니다. 문자열은 지원하지 않습니다.
       * 기본 값은 '*'입니다.
       */
      "password_char": "*",
      /* 필수
       * layers에서 설명한 내용과 같습니다. file 대신 raw를 사용할 수 있습니다.
       */
      "file": "files/input"
    }
  }
}
